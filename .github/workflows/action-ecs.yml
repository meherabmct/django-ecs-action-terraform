name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Image and Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Git SHA
        id: git-sha
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build, Tag, and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}  # Ensure this is set in GitHub Secrets
          IMAGE_TAG: ${{ env.GIT_SHA }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./django/build-process/docker-backend-django/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Existing ECS Task Definition
        id: get-task-def
        run: |
            aws ecs describe-task-definition --task-definition "djano-task" --query taskDefinition > task-definition.json
        
      - name: Update ECS Task Definition with New Image
        id: update-task-def
        run: |
            jq '.containerDefinitions[0].image = env.IMAGE_URI' task-definition.json > task-def-updated.json
            aws ecs register-task-definition --cli-input-json file://task-def-updated.json > new-task-def.json
              
            TASK_REVISION=$(jq -r '.taskDefinition.taskDefinitionArn' new-task-def.json)
            echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV
      - name: Deploy New Task Definition to ECS
        run: |
            aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --task-definition $TASK_REVISION --force-new-deployment